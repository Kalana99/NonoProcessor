----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 04/05/2021 12:18:15 AM
-- Design Name: 
-- Module Name: NanoProcessor - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity NanoProcessor is
    Port ( Clk          : in STD_LOGIC;
           Reset        : in STD_LOGIC;
           Overflow     : out STD_LOGIC;
           Zero         : out STD_LOGIC;
           S_out        : out STD_LOGIC_VECTOR (3 downto 0);
           sevenSegOut  : out STD_LOGIC_VECTOR(6 downto 0));
end NanoProcessor;

architecture Behavioral of NanoProcessor is

component Slow_Clk is
    Port ( Clk_in : in STD_LOGIC;
           Clk_out : out STD_LOGIC);
end component;

signal slwClkOut : std_logic;

component Ins_Decoder is
    Port ( Instruction      : in STD_LOGIC_VECTOR (11 downto 0);
           JumpCheck        : in STD_LOGIC_VECTOR (3 downto 0);
           Reg_En           : out STD_LOGIC_VECTOR (2 downto 0);
           Load_Sel         : out STD_LOGIC;
           Imm_Val          : out STD_LOGIC_VECTOR (3 downto 0);
           Reg_Sel_A        : out STD_LOGIC_VECTOR (2 downto 0);
           Reg_Sel_B        : out STD_LOGIC_VECTOR (2 downto 0);
           AddSub_Sel       : out STD_LOGIC;
           Jump_Flag        : out STD_LOGIC;
           Jump_Add         : out STD_LOGIC_VECTOR (2 downto 0);
           Neg_Sel          : out STD_LOGIC);
end component;

signal ins                                  : std_logic_vector(11 downto 0);
signal immVal                               : std_logic_vector(3 downto 0);
signal regEn, regSelA, regSelB, jmpAdd      : std_logic_vector(2 downto 0);
signal loadSel, addSubSel, jmpFlag, negSel  : std_logic;

component ProgramCounter is
    Port ( Clk      : in STD_LOGIC;
           Reset    : in STD_LOGIC;
           JumpFlag : in STD_LOGIC;
           JumpAdd  : in STD_LOGIC_VECTOR (2 downto 0);
           MemSel   : out STD_LOGIC_VECTOR (2 downto 0));
end component;

signal memSel : std_logic_vector(2 downto 0);

component Program_ROM is
    Port ( Mem_Sel      : in STD_LOGIC_VECTOR (2 downto 0);
           Instruction  : out STD_LOGIC_VECTOR (11 downto 0));
end component;

component RegisterBank is
    Port ( RegBank_in   : in STD_LOGIC_VECTOR (3 downto 0);
           RegEN        : in STD_LOGIC_VECTOR (2 downto 0);
           Clk          : in STD_LOGIC;
           Reg0_out     : out STD_LOGIC_VECTOR (3 downto 0);
           Reg1_out     : out STD_LOGIC_VECTOR (3 downto 0);
           Reg2_out     : out STD_LOGIC_VECTOR (3 downto 0);
           Reg3_out     : out STD_LOGIC_VECTOR (3 downto 0);
           Reg4_out     : out STD_LOGIC_VECTOR (3 downto 0);
           Reg5_out     : out STD_LOGIC_VECTOR (3 downto 0);
           Reg6_out     : out STD_LOGIC_VECTOR (3 downto 0);
           Reg7_out     : out STD_LOGIC_VECTOR (3 downto 0));
end component;

signal regBankIn, r0, r1, r2, r3, r4, r5, r6, r7 : std_logic_vector(3 downto 0);

component Mux8_4bit is
    Port ( A0       : in STD_LOGIC_VECTOR (3 downto 0);
           A1       : in STD_LOGIC_VECTOR (3 downto 0);
           A2       : in STD_LOGIC_VECTOR (3 downto 0);
           A3       : in STD_LOGIC_VECTOR (3 downto 0);
           A4       : in STD_LOGIC_VECTOR (3 downto 0);
           A5       : in STD_LOGIC_VECTOR (3 downto 0);
           A6       : in STD_LOGIC_VECTOR (3 downto 0);
           A7       : in STD_LOGIC_VECTOR (3 downto 0);
           RegSel   : in STD_LOGIC_VECTOR (2 downto 0);
           Q        : out STD_LOGIC_VECTOR (3 downto 0));
end component;

signal muxOutA, muxOutB : std_logic_vector(3 downto 0);

component AddSubUnit is
    Port ( MuxA_out     : in STD_LOGIC_VECTOR (3 downto 0);
           MuxB_out     : in STD_LOGIC_VECTOR (3 downto 0);
           Add_Sub_sel  : in STD_LOGIC;
           Neg_in       : in STD_LOGIC;
           Add_Sub_out  : out STD_LOGIC_VECTOR (3 downto 0);
           overflow     : out STD_LOGIC;
           zero         : out STD_LOGIC);
end component;

signal addSubOut        : std_logic_vector(3 downto 0);

component Mux2_4bit is
    Port ( immVal           : in STD_LOGIC_VECTOR (3 downto 0);
           addSub_result    : in STD_LOGIC_VECTOR (3 downto 0);
           loadSel          : in STD_LOGIC;
           mux_out          : out STD_LOGIC_VECTOR (3 downto 0));
end component;

component LUT_7seg is
    Port ( Address  : in STD_LOGIC_VECTOR (3 downto 0);
           Data     : out STD_LOGIC_VECTOR (6 downto 0));
end component;

begin

Slow_Clk_0 : Slow_Clk
    port map(
        Clk_in => Clk,          --connected from direct input
        Clk_out => slwClkOut);
        
RegisterBank_0 : RegisterBank
    port map(
        RegBank_in  => regBankIn,   --in
        RegEN       => regEn,       --in
        Clk         => slwClkOut,   --in
        Reg0_out    => r0,
        Reg1_out    => r1,
        Reg2_out    => r2,
        Reg3_out    => r3,
        Reg4_out    => r4,
        Reg5_out    => r5,
        Reg6_out    => r6,
        Reg7_out    => r7);

Mux8_4bit_A : Mux8_4bit
    port map(
        A0 => r0,           --in
        A1 => r1,           --in
        A2 => r2,           --in
        A3 => r3,           --in
        A4 => r4,           --in
        A5 => r5,           --in
        A6 => r6,           --in
        A7 => r7,           --in
        RegSel => regSelA,  --in
        Q => muxOutA);
        
Mux8_4bit_B : Mux8_4bit
    port map(
        A0      => r0,          --in
        A1      => r1,          --in
        A2      => r2,          --in
        A3      => r3,          --in
        A4      => r4,          --in
        A5      => r5,          --in
        A6      => r6,          --in
        A7      => r7,          --in
        RegSel  => regSelB,     --in
        Q       => muxOutB);
        
AddSubUnit_0 : AddSubUnit
    port map(
        MuxA_out    => muxOutA,     --in
        MuxB_out    => muxOutB,     --in
        Add_Sub_sel => addSubSel,   --in
        Neg_in      => negSel,      --in
        Add_Sub_out => addSubOut,
        overflow    => Overflow,    --connected to direct output
        zero        => Zero);       --connected to direct output
                
Mux2_4bit_0 : Mux2_4bit
    port map(
        immVal => immVal,           --in
        addSub_result => addSubOut, --in
        loadSel => loadSel,         --in
        mux_out => regBankIn);

Ins_Decoder_0 : Ins_Decoder
    port map(
        Instruction => ins,     --in
        JumpCheck   => muxOutA,  --in
        Reg_En      => regEn,
        Load_Sel    => loadSel,
        Imm_Val     => immVal,
        Reg_Sel_A   => regSelA,
        Reg_Sel_B   => regSelB,
        AddSub_Sel  => addSubSel,
        Jump_Flag   => jmpFlag,
        Jump_Add    => jmpAdd,
        Neg_Sel     => negSel); 
        
Program_ROM_0 : Program_ROM
    port map(
        Mem_Sel     => memSel,      --in
        Instruction => ins);        
        
ProgramCounter_0 : ProgramCounter
    port map(
        Clk         => slwClkOut,   --in
        Reset       => Reset,       --connected from direct input
        JumpFlag    => jmpFlag,     --in
        JumpAdd     => jmpAdd,      --in
        MemSel      => memSel);
        
LUT_7seg_0 : LUT_7seg
    port map(
        Address => r7,
        Data    => sevenSegOut);
        
    S_out <= r7; --connected to direct output

end Behavioral;
